import axios from 'axios';

const API_BASE_URL = 'https://test-server.com/api'; // Replace with actual API base URL

export const fetchProducts = async (category, company) => {
  try {
    const response = await axios.get(${API_BASE_URL}/products, {
      params: { category, company }
    });
    return response.data.products;
  } catch (error) {
    console.error('Error fetching products:', error);
    return [];
  }
};
import React, { useState, useEffect } from 'react';
import { fetchProducts } from '../api';
import ProductCard from '../components/ProductCard';
import { Container, Grid, TextField, MenuItem, Select, InputLabel, FormControl, Button } from '@material-ui/core';

const AllProducts = () => {
  const [products, setProducts] = useState([]);
  const [filters, setFilters] = useState({
    category: '',
    company: '',
    rating: 0,
    minPrice: 0,
    maxPrice: Infinity,
    availability: ''
  });
  const [sort, setSort] = useState('');
  const [page, setPage] = useState(1);
  const PRODUCTS_PER_PAGE = 10;

  useEffect(() => {
    const fetchData = async () => {
      const products = await fetchProducts(filters.category, filters.company);
      setProducts(products);
    };
    fetchData();
  }, [filters]);

  const filteredProducts = products
    .filter(product => product.rating >= filters.rating)
    .filter(product => product.price >= filters.minPrice && product.price <= filters.maxPrice)
    .filter(product => filters.availability ? product.availability === filters.availability : true)
    .sort((a, b) => {
      switch (sort) {
        case 'price':
          return a.price - b.price;
        case 'rating':
          return b.rating - a.rating;
        case 'discount':
          return b.discount - a.discount;
        default:
          return 0;
      }
    });

  const paginatedProducts = filteredProducts.slice((page - 1) * PRODUCTS_PER_PAGE, page * PRODUCTS_PER_PAGE);

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prevFilters => ({
      ...prevFilters,
      [name]: value
    }));
  };

  const handleSortChange = (e) => {
    setSort(e.target.value);
  };

  const handlePageChange = (newPage) => {
    setPage(newPage);
  };

  return (
    <Container>
      <h1>All Products</h1>
      <div className="filters">
        <TextField label="Category" name="category" onChange={handleFilterChange} />
        <TextField label="Company" name="company" onChange={handleFilterChange} />
        <TextField type="number" label="Minimum Rating" name="rating" onChange={handleFilterChange} />
        <TextField type="number" label="Min Price" name="minPrice" onChange={handleFilterChange} />
        <TextField type="number" label="Max Price" name="maxPrice" onChange={handleFilterChange} />
        <FormControl>
          <InputLabel>Availability</InputLabel>
          <Select name="availability" onChange={handleFilterChange}>
            <MenuItem value="">Any Availability</MenuItem>
            <MenuItem value="In Stock">In Stock</MenuItem>
            <MenuItem value="Out of Stock">Out of Stock</MenuItem>
          </Select>
        </FormControl>
        <FormControl>
          <InputLabel>Sort By</InputLabel>
          <Select onChange={handleSortChange}>
            <MenuItem value="">Sort By</MenuItem>
            <MenuItem value="price">Price</MenuItem>
            <MenuItem value="rating">Rating</MenuItem>
            <MenuItem value="discount">Discount</MenuItem>
          </Select>
        </FormControl>
      </div>
      <Grid container spacing={3}>
        {paginatedProducts.map(product => (
          <Grid item xs={12} sm={6} md={4} key={product.id}>
            <ProductCard product={product} />
          </Grid>
        ))}
      </Grid>
      <div className="pagination">
        {[...Array(Math.ceil(filteredProducts.length / PRODUCTS_PER_PAGE)).keys()].map(pageNumber => (
          <Button key={pageNumber} onClick={() => handlePageChange(pageNumber + 1)}>
            {pageNumber + 1}
          </Button>
        ))}
      </div>
    </Container>
  );
};

export default AllProducts;
import React from 'react';
import { Card, CardContent, Typography } from '@material-ui/core';
import { Link } from 'react-router-dom';

const ProductCard = ({ product }) => (
  <Card>
    <img src={https://via.placeholder.com/150?text=${product.name}} alt={product.name} />
    <CardContent>
      <Typography variant="h5">{product.name}</Typography>
      <Typography>Company: {product.company}</Typography>
      <Typography>Category: {product.category}</Typography>
      <Typography>Price: ${product.price}</Typography>
      <Typography>Rating: {product.rating}</Typography>
      <Typography>Discount: {product.discount}%</Typography>
      <Typography>Availability: {product.availability}</Typography>
      <Link to={/product/${product.id}}>View Details</Link>
    </CardContent>
  </Card>
);

export default ProductCard;
import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import AllProducts from './pages/AllProducts';
import ProductDetail from './pages/ProductDetail';
import { CssBaseline } from '@material-ui/core';

function App() {
  return (
    <Router>
      <CssBaseline />
      <Switch>
        <Route exact path="/" component={AllProducts} />
        <Route path="/product/:id" component={ProductDetail} />
      </Switch>
    </Router>
  );
}

export default App;
